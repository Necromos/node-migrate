#!/usr/bin/env node

const program = require('commander')
const path = require('path')
const dotenv = require('dotenv')
const log = require('../lib/loggers/log')
const registerCompiler = require('../lib/register-compiler')
const pkg = require('../package.json')

let _name;

const create = (name) => {
  // Name provided?
  _name = name

  // Change the working dir
  process.chdir(program.chdir)

  // Load compiler
  if (program.compiler) registerCompiler(program.compiler);

  // Load the template generator
  const gen = require(program.generator);
  gen({
    name,
    dateFormat: program.dateFormat,
    templateFile: program.templateFile,
    migrationsDirectory: program.migrationsDir,
    extension: program.extension || path.extname(program.templateFile),
  }, (err, p) => {
    if (err) {
      log.error('Template generation error', err.message);
      process.exit(1);
    }
    log('create', p);
  })
}

program
  .version(pkg.version)
  .option('-c, --chdir [dir]', 'Change the working directory', process.cwd())
  .option('--migrations-dir <dir>', 'Change the migrations directory name', 'migrations')
  .option('--compiler <ext:module>', 'Use the given module to compile files')
  .option('-d, --date-format [format]', 'Set a date format to use')
  .option('-t, --template-file [filePath]', 'Set path to template file to use for new migrations', path.join(__dirname, '..', 'lib', 'template.js'))
  .option('-e, --extension [extension]', 'Use the given extension to create the file')
  .option('--extention [extension]', '. Use the given extension to create the file. Deprecated as of v1.2. Replace with -e or --extension.')
  .option('-g, --generator <name>', 'A template generator function', path.join(__dirname, '..', 'lib', 'template-generator'))
  .option('--env [name]', 'Use dotenv to load an environment file')
  .arguments('<name>')
  .action(create)
  .parse(process.argv)

if (program.extention) {
  log('create', '"--extention" argument is deprecated. Use "--extension" instead');
  program.extension = program.extension;
}

// Setup environment
if (program.env) {
  const e = dotenv.config({
    path: typeof program.env === 'string' ? program.env : '.env',
  });
  if (e && e.error instanceof Error) throw e.error;
}

if (!_name) {
  log.error('error', 'Migration name required')
  log('usage', 'migrate create <name>')
}
