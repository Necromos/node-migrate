#!/usr/bin/env node

const program = require('commander')
const path = require('path')
const minimatch = require('minimatch')
const dotenv = require('dotenv')
const migrate = require('../')
const runMigrations = require('../lib/migrate')
const log = require('../lib/loggers/log')
const registerCompiler = require('../lib/register-compiler')
const pkg = require('../package.json')

program
  .version(pkg.version)
  .usage('[options] <name>')
  .option('-c, --chdir <dir>', 'Change the working directory', process.cwd())
  .option('-f, --state-file <path>', 'Set path to state file', '.migrate')
  .option('-s, --store <store>', 'Set the migrations store', path.join(__dirname, '..', 'lib', 'stores', 'FileStore'))
  .option('--migrations-dir <dir>', 'Change the migrations directory name', 'migrations')
  .option('--matches <glob>', 'A glob pattern to filter migration files', '*')
  .option('--compiler <ext:module>', 'Use the given module to compile files')
  .option('--env [name]', 'Use dotenv to load an environment file')
  .option('-F, --force', 'Force through the command, ignoring warnings')
  .option('-D, --dry-run', 'Dry run commands without making any changes')
  .parse(process.argv);

// Change the working dir
process.chdir(program.chdir);

// Setup environment
if (program.env) {
  const e = dotenv.config({
    path: typeof program.env === 'string' ? program.env : '.env',
  });
  if (e && e.error instanceof Error) throw e.error;
}

// Load compiler
if (program.compiler) registerCompiler(program.compiler);

if (program.dryRun) require('../lib/dry-run-rewriters');

// Setup store
if (program.store[0] === '.') program.store = path.join(process.cwd(), program.store);

const Store = require(program.store);
const store = new Store(program.stateFile, program.dryRun);

// Load in migrations
migrate.load({
  stateStore: store,
  migrationsDirectory: program.migrationsDir,
  filterFunction: minimatch.filter(program.matches),
  ignoreMissing: program.force
}, (err, set) => {
  if (err) {
    log.error('error', err);
    process.exit(1);
  }

  set.on('migration', (migration, direction) => log(direction, migration.title));

  runMigrations(set, 'down', program.args[0], (err) => {
    if (err) {
      log('error', err);
      process.exit(1);
    }

    log('migration', 'complete');
    process.exit(0);
  });
})
